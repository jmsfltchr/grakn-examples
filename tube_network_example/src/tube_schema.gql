# Copyright 2018 Grakn Labs Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

define

naptan-id sub attribute datatype string;
name sub attribute datatype string;
lat sub attribute datatype double;
lon sub attribute datatype double;
duration sub attribute datatype long;
distance sub attribute datatype double;

station sub entity,
    plays stop,
	plays beginning,
	plays end,
    plays origin,
    plays destination,
	plays contained-station,
	plays neighbour,
	has naptan-id,
    has name,
    has lat,
    has lon;

# Try using this sentence to formulate the structure of a relationship:
# A <relationship> has a <role> in the form of a <subject> (<subject> is any concept, which could be an entity, relationship, or attribute)
# For example: a route has a stop in the form of a station

route sub relationship,
	relates section,
	relates stop,
	relates origin as stop,
	relates destination as stop,
	relates route-operator,

route-section sub entity,
	plays section,
	plays service,
	has duration;

tunnel sub relationship,
	relates beginning,
	relates end,
	relates service;

tube-line sub entity,
	plays route-operator,
	has name;

zone sub relationship,
	relates contained-station,
	has name;

# neighbourship is an extra idea that is not critical. Refer to the README for more info
neighbourship sub relationship,
	relates neighbour,
	has distance;

neighbouring sub rule,
	when {
		$s1 isa station;
		$s2 isa station;
		($s1, $s2) isa tunnel;
	} then {
		(neighbour: $s1, neighbour: $s2) isa neighbourship;
	}
