# Copyright 2018 Grakn Labs Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Try using this sentence to formulate the structure of a relationship:
# A <relationship> has a <role> in the form of a <subject> (<subject> is a concept, which could be an entity, relationship, or attribute)

define

naptan-id sub attribute datatype string;
name sub attribute datatype string;
lat sub attribute datatype double;
lon sub attribute datatype double;
duration sub attribute datatype long;
distance sub attribute datatype double;


station sub entity,
    plays stop,
	plays beginning,
	plays end,
    plays start,
    plays finish,
    plays origin,
    plays destination,
	plays contained-station,
	plays neighbour,
	has naptan-id,
    has name,
    has lat,
    has lon;


route sub relationship,
	# a <route> has a <section> in the form of a <route-section>
	relates section, # is <section> too vague?
	# a <route> has a <stop> in the form of a <station>
	relates stop,

	# a <route> has a <origin> as a <stop> in the form of a <station>
	relates origin as stop,

	# a <route> has a <destination> as a <stop> in the form of a <station>
	relates destination as stop,

	# a <route> has a <service/operator/agent/handler/service-provider/provider/facilitator/enabler/route-line> in the form of a <line>
	# why route-line or route-operator and not something else? Because the other terms are vague, and could describe a
	# lot of other roles, whereas route-line substitutes for where we cannot find a name, but can generate something specific

	# a West Ruislip to Epping route has a <route-line/route-operator> in the form of the Central Line
	relates route-operator,

    plays leg-route;


route-section sub entity,

	# a <route-section> plays the role of <section> in a <route>
	# a <route-section> relates to a <route> as a <section>
	# You could replace this entity with the timetabled duration, but that wouldn't be open to extensibility if we later wanted to add more information about that route section
	plays section,
	plays service,
	has duration;


tunnel sub relationship, # could be called a link, transport-link, track-section or tunnel
	# a <tunnel> has a <beginning> in the form of a <station>
	relates beginning,

	# a <tunnel> has a <end> in the form of a <station>
	relates end,

	# a <tunnel> has a <linking-section> in the form of a <route-section>
	# a <tunnel> has a <fulfillment/actuation/tube-link/link/connection/service> in the form of a <route-section>
	# a <tunnel> has a <service> in the form of a <route-section>
	relates service;

	#has distance;  # If link is directional than this would exist twice if included here. Would be better as a seperate <neighbourship> relationship


tube-line sub entity,
	plays route-operator,
	has name;


zone sub relationship,
	# a <zone> has a <contained-station> in the form of a <station>
	relates contained-station,
	# usage: $z(contained-station: $station1, contained-station: $station2) isa zone;
	has name;


neighbourship sub relationship,
	# a <neighbourship> has a <neighbour> in the form of a <station>
	relates neighbour,
	has distance;


journey-leg sub relationship,
    relates start,
    relates finish,
    relates leg-route;


find-journey-leg sub rule,
    when {
        $s1 isa station;
        $s2 isa station;
        $rs isa route-section;
        $t1(beginning: $s1, end: $s2, service: $rs) isa tunnel;
        $r(section: $rs) isa route;
    } then {
        (start: $s1, finish: $s2, leg-route: $r) isa journey-leg;
    };


find-journey-leg-transitive sub rule,
    when {
        $s1 isa station;
        $s2 isa station;
        $s3 isa station;
        $r isa route;
        (start: $s1, finish: $s2, leg-route: $r) isa journey-leg;
        (start: $s2, finish: $s3, leg-route: $r) isa journey-leg;
    } then {
        (start: $s1, finish: $s3, leg-route: $r) isa journey-leg;
        # When we can do arithmetic then we'll be able to add up the time taken also
    };
