define

direction sub attribute datatype string;
name sub attribute datatype string;
service-type sub attribute datatype string;
naptan-id sub attribute datatype string;

#date sub attribute datatype string;
valid-from sub attribute datatype date;
valid-to sub attribute datatype date;

mode-of-transport sub entity,
    plays operated-by,
    has name;

operation sub relationship,
    relates operated-by,
    relates operates;

has-stops sub relationship, # This naming is wrong
    relates has-route-section,
    relates origin,
    relates destination;

route sub entity,  # This should be called service e.g. X1, Victoria, ScotRail (more like "operator" in the case of ScotRail)
    plays operates,
    plays composes,
    has name;

route-section sub entity,  # This should be called route
    plays has-route-section,
    plays comprises,
    has direction,
    has name,
    has service-type,
    has valid-from,
    has valid-to;

composition sub relationship,  # If route becomes serice and sub-route becomes route, then this might become "runs" e.g. FGW runs route Bristol to London, Victoria runs blah
    relates comprises,
    relates composes;

stop sub entity,
    plays origin,
    plays destination,
    plays connected-from,
    plays connected-to,
	has naptan-id,  # make an Id later
    has name;

origin sub role; destination sub role; has-route-section sub role;
operated-by sub role; operates sub role;

connection sub relationship,
    relates connected-from,
    relates connected-to;

#direct-connection sub connection,
#    relates connected-stop;

#indirect-connection sub connection,
#    relates connected-stop;

directly-connected sub rule
    when {
        $origin isa stop; $destination isa stop; $route-section isa route-section;
        (origin: $origin, destination: $destination, has-route-section: $route-section) isa has-stops;
        }
    then {
        (connected-from: $origin, connected-to: $destination) isa connection;
    };

indirectly-connected sub rule
    when {
        $origin isa stop; $change isa stop; $destination isa stop;
        (connected-from: $origin, connected-to: $change) isa connection;
        (connected-from: $change, connected-to: $destination) isa connection;
        $origin != $destination;
    }
    then {
        (connected-from: $origin, connected-to: $destination) isa connection;
    };

#tube_station sub stop;
#bus_stop sub stop;
#bus_station sub bus_stop; # maybe relates multiple bus stops instead 
# ./grakn migrate json -i ./all_routes_migration.gql -n <output.txt>
# ./graql migrate csv -i src/dataset.csv -t src/dataset-migrator.gql -k grakn --no > src/datasets.gql
# ./graql migrate json -i datasets/tfl/api_data/all_routes.json -t src/dataset-migrator.gql -k grakn --no > src/datasets.gql
